"use strict";(self.webpackChunktfcmt=self.webpackChunktfcmt||[]).push([[722],{5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>d});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){o(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef(function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),f=o,d=c["".concat(s,".").concat(f)]||c[f]||u[f]||a;return n?r.createElement(d,l(l({ref:t},m),{},{components:n})):r.createElement(d,l({ref:t},m))});function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7321:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(8168),o=(n(6540),n(5680));const a={sidebar_position:600},l="Command Usage",i={unversionedId:"usage",id:"usage",title:"Command Usage",description:"tfcmt plan",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/tfcmt/usage",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/tfcmt-docs/edit/main/docs/usage.md",tags:[],version:"current",sidebarPosition:600,frontMatter:{sidebar_position:600},sidebar:"tutorialSidebar",previous:{title:"Use tfcmt with terragrunt run-all",permalink:"/tfcmt/terragrunt-run-all"},next:{title:"GitHub Enterprise Support",permalink:"/tfcmt/github-enterprise"}},s={},p=[{value:"tfcmt plan",id:"tfcmt-plan",level:2},{value:"tfcmt apply",id:"tfcmt-apply",level:2},{value:"tfcmt version",id:"tfcmt-version",level:2},{value:"tfcmt version",id:"tfcmt-version-1",level:2}],m={toc:p},c="wrapper";function u({components:e,...t}){return(0,o.yg)(c,(0,r.A)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"command-usage"},"Command Usage"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt --help\nNAME:\n   tfcmt - Notify the execution result of terraform command\n\nUSAGE:\n   tfcmt [global options] [command [command options]]\n\nVERSION:\n   4.14.10\n\nCOMMANDS:\n   plan     Run terraform plan and post a comment to GitHub commit, pull request, or issue\n   apply    Run terraform apply and post a comment to GitHub commit, pull request, or issue\n   version  Show version\n   version  Show version\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --owner string                 GitHub Repository owner name [$TFCMT_REPO_OWNER]\n   --repo string                  GitHub Repository name [$TFCMT_REPO_NAME]\n   --sha string                   commit SHA (revision) [$TFCMT_SHA]\n   --build-url string             build url\n   --log-level string             log level\n   --pr int                       pull request number (default: 0) [$TFCMT_PR_NUMBER]\n   --config string                config path [$TFCMT_CONFIG]\n   --var string [ --var string ]  template variables. The format of value is '<name>:<value>'. You can refer to the variable in the comment and label template using {{.Vars.<variable name>}}.\n   --output string                specify file to output result instead of posting a comment\n   --help, -h                     show help\n   --version, -v                  print the version\n")),(0,o.yg)("h2",{id:"tfcmt-plan"},"tfcmt plan"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt plan --help\nNAME:\n   tfcmt plan - Run terraform plan and post a comment to GitHub commit, pull request, or issue\n\nUSAGE:\n   tfcmt plan  <command> <args>...\n\nDESCRIPTION:\n   Run terraform plan and post a comment to GitHub commit, pull request, or issue.\n\n   $ tfcmt [<global options>] plan [-patch] [-skip-no-changes] -- terraform plan [<terraform plan options>]\n\nOPTIONS:\n   --patch            update an existing comment instead of creating a new comment. If there is no existing comment, a new comment is created. (default: false) [$TFCMT_PLAN_PATCH]\n   --skip-no-changes  If there is no change tfcmt updates a label but doesn't post a comment (default: false) [$TFCMT_SKIP_NO_CHANGES]\n   --ignore-warning   If skip-no-changes is enabled, comment is posted even if there is a warning. If skip-no-changes is disabled, warning is removed from the comment. (default: false) [$TFCMT_IGNORE_WARNING]\n   --disable-label    Disable to add or update a label (default: false) [$TFCMT_DISABLE_LABEL]\n   --help, -h         show help\n")),(0,o.yg)("h2",{id:"tfcmt-apply"},"tfcmt apply"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt apply --help\nNAME:\n   tfcmt apply - Run terraform apply and post a comment to GitHub commit, pull request, or issue\n\nUSAGE:\n   tfcmt apply  <command> <args>...\n\nDESCRIPTION:\n   Run terraform apply and post a comment to GitHub commit, pull request, or issue.\n\n   $ tfcmt [<global options>] apply -- terraform apply [<terraform apply options>]\n\nOPTIONS:\n   --help, -h  show help\n")),(0,o.yg)("h2",{id:"tfcmt-version"},"tfcmt version"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt version --help\nNAME:\n   tfcmt version - Show version\n\nUSAGE:\n   tfcmt version\n\nOPTIONS:\n   --json, -j  Output version in JSON format (default: false)\n   --help, -h  show help\n")),(0,o.yg)("h2",{id:"tfcmt-version-1"},"tfcmt version"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt version --help\nNAME:\n   tfcmt version - Show version\n\nUSAGE:\n   tfcmt version\n\nOPTIONS:\n   --json, -j  Output version in JSON format (default: false)\n   --help, -h  show help\n")))}u.isMDXComponent=!0}}]);