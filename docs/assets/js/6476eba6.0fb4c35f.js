"use strict";(self.webpackChunktfcmt=self.webpackChunktfcmt||[]).push([[722],{5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=i(n),f=a,d=u["".concat(c,".").concat(f)]||u[f]||s[f]||o;return n?r.createElement(d,l(l({ref:t},m),{},{components:n})):r.createElement(d,l({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=f;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[u]="string"==typeof e?e:a,l[1]=p;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7321:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var r=n(8168),a=(n(6540),n(5680));const o={sidebar_position:600},l="Command Usage",p={unversionedId:"usage",id:"usage",title:"Command Usage",description:"tfcmt plan",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/tfcmt/usage",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/tfcmt-docs/edit/main/docs/usage.md",tags:[],version:"current",sidebarPosition:600,frontMatter:{sidebar_position:600},sidebar:"tutorialSidebar",previous:{title:"Use tfcmt with terragrunt run-all",permalink:"/tfcmt/terragrunt-run-all"},next:{title:"GitHub Enterprise Support",permalink:"/tfcmt/github-enterprise"}},c={},i=[{value:"tfcmt plan",id:"tfcmt-plan",level:2},{value:"tfcmt apply",id:"tfcmt-apply",level:2}],m={toc:i},u="wrapper";function s(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"command-usage"},"Command Usage"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt help\nNAME:\n   tfcmt - Notify the execution result of terraform command\n\nUSAGE:\n   tfcmt [global options] command [command options] \n\nVERSION:\n   4.9.1 (7a2e3a22abd25e095dac93e2834b87f9b9d84320)\n\nCOMMANDS:\n   plan     Run terraform plan and post a comment to GitHub commit or pull request\n   apply    Run terraform apply and post a comment to GitHub commit or pull request\n   version  Show version\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --owner value                GitHub Repository owner name [$TFCMT_REPO_OWNER]\n   --repo value                 GitHub Repository name [$TFCMT_REPO_NAME]\n   --sha value                  commit SHA (revision) [$TFCMT_SHA]\n   --build-url value            build url\n   --log-level value            log level\n   --pr value                   pull request number (default: 0) [$TFCMT_PR_NUMBER]\n   --config value               config path [$TFCMT_CONFIG]\n   --var value [ --var value ]  template variables. The format of value is '<name>:<value>'\n   --output value               specify file to output result instead of post comment\n   --help, -h                   show help\n   --version, -v                print the version\n")),(0,a.yg)("h2",{id:"tfcmt-plan"},"tfcmt plan"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt help plan\nNAME:\n   tfcmt plan - Run terraform plan and post a comment to GitHub commit or pull request\n\nUSAGE:\n   tfcmt plan [command options]\n\nOPTIONS:\n   --patch            update an existing comment instead of creating a new comment. If there is no existing comment, a new comment is created. (default: false)\n   --skip-no-changes  If there is no change tfcmt updates a label but doesn't post a comment (default: false)\n   --help, -h         show help\n")),(0,a.yg)("h2",{id:"tfcmt-apply"},"tfcmt apply"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt help apply\nNAME:\n   tfcmt apply - Run terraform apply and post a comment to GitHub commit or pull request\n\nUSAGE:\n   tfcmt apply [command options]\n\nOPTIONS:\n   --help, -h  show help\n")))}s.isMDXComponent=!0}}]);