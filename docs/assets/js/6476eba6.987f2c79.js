"use strict";(self.webpackChunktfcmt=self.webpackChunktfcmt||[]).push([[268],{5788:(e,n,t)=>{t.d(n,{Iu:()=>i,yg:()=>g});var a=t(1504);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),m=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},i=function(e){var n=m(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),u=m(t),f=r,g=u["".concat(c,".").concat(f)]||u[f]||s[f]||o;return t?a.createElement(g,l(l({ref:n},i),{},{components:t})):a.createElement(g,l({ref:n},i))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=f;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p[u]="string"==typeof e?e:r,l[1]=p;for(var m=2;m<o;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4512:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var a=t(5072),r=(t(1504),t(5788));const o={sidebar_position:600},l="Command Usage",p={unversionedId:"usage",id:"usage",title:"Command Usage",description:"-var option",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/tfcmt/usage",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/tfcmt-docs/edit/main/docs/usage.md",tags:[],version:"current",sidebarPosition:600,frontMatter:{sidebar_position:600},sidebar:"tutorialSidebar",previous:{title:"Use tfcmt with terragrunt run-all",permalink:"/tfcmt/terragrunt-run-all"},next:{title:"GitHub Enterprise Support",permalink:"/tfcmt/github-enterprise"}},c={},m=[{value:"-var option",id:"-var-option",level:3},{value:"tfcmt plan",id:"tfcmt-plan",level:2},{value:"tfcmt apply",id:"tfcmt-apply",level:2}],i={toc:m},u="wrapper";function s(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.c)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"command-usage"},"Command Usage"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt --version\ntfcmt version 4.4.3 (4a492ac82c59c1a60b114d4038fb5fc83bff0502)\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt --help\nNAME:\n   tfcmt - Notify the execution result of terraform command\n\nUSAGE:\n   tfcmt [global options] command [command options] [arguments...]\n\nVERSION:\n   4.4.3 (4a492ac82c59c1a60b114d4038fb5fc83bff0502)\n\nCOMMANDS:\n   plan     Run terraform plan and post a comment to GitHub commit or pull request\n   apply    Run terraform apply and post a comment to GitHub commit or pull request\n   version  Show version\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --owner value                GitHub Repository owner name [$TFCMT_REPO_OWNER]\n   --repo value                 GitHub Repository name [$TFCMT_REPO_NAME]\n   --sha value                  commit SHA (revision) [$TFCMT_SHA]\n   --build-url value            build url\n   --log-level value            log level\n   --pr value                   pull request number (default: 0) [$TFCMT_PR_NUMBER]\n   --config value               config path [$TFCMT_CONFIG]\n   --var value [ --var value ]  template variables. The format of value is '<name>:<value>'\n   --output value               specify file to output result instead of post comment\n   --help, -h                   show help\n   --version, -v                print the version\n")),(0,r.yg)("h3",{id:"-var-option"},"-var option"),(0,r.yg)("p",null,"tfcmt supports passing variables by ",(0,r.yg)("inlineCode",{parentName:"p"},"-var")," option.\nThe format of the value should be ",(0,r.yg)("inlineCode",{parentName:"p"},"<name>:<value>"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt -var name:foo plan -- terraform plan\n")),(0,r.yg)("p",null,"The variables can be referred in ",(0,r.yg)("inlineCode",{parentName:"p"},"template")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"label"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'terraform:\n  plan:\n    template: |\n      {{.Vars.name}}\n      ...\n    when_add_or_update_only:\n      label: "{{.Vars.name}}/add-or-update"\n')),(0,r.yg)("h2",{id:"tfcmt-plan"},"tfcmt plan"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt help plan\nNAME:\n   tfcmt plan - Run terraform plan and post a comment to GitHub commit or pull request\n\nUSAGE:\n   tfcmt plan [command options] [arguments...]\n\nOPTIONS:\n   --patch            update an existing comment instead of creating a new comment. If there is no existing comment, a new comment is created. (default: false)\n   --skip-no-changes  If there is no change tfcmt updates a label but doesn't post a comment (default: false)\n   --help, -h         show help\n")),(0,r.yg)("p",null,"e.g."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt plan -- terraform plan\n")),(0,r.yg)("h2",{id:"tfcmt-apply"},"tfcmt apply"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt help apply\nNAME:\n   tfcmt apply - Run terraform apply and post a comment to GitHub commit or pull request\n\nUSAGE:\n   tfcmt apply [command options] [arguments...]\n\nOPTIONS:\n   --help, -h  show help\n")),(0,r.yg)("p",null,"e.g."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"$ tfcmt apply -- terraform apply\n")))}s.isMDXComponent=!0}}]);